// Generated by jauntsdn.com rsocket-rpc compiler (version 1.5.4)
// source: service.proto

package futures;

@com.jauntsdn.rsocket.Rpc.Generated(
    role = com.jauntsdn.rsocket.Rpc.Role.SERVICE,
    service = Diner.class)
@SuppressWarnings("all")
public final class DinerServer implements com.jauntsdn.rsocket.RpcService {
  private final java.util.concurrent.CompletableFuture<Void> onClose = new java.util.concurrent.CompletableFuture<>();
  private final Diner service;
  private final com.jauntsdn.rsocket.Rpc.Codec rpcCodec;
  private final java.util.function.Function<com.google.protobuf.MessageLite, com.jauntsdn.rsocket.Message> messageEncoder;
  private final com.jauntsdn.rsocket.RpcInstrumentation.Factory<com.jauntsdn.rsocket.Message> orderInstrumentation;
  private final com.jauntsdn.rsocket.RpcInstrumentation.Factory<Void> payInstrumentation;

  private DinerServer(Diner service, com.jauntsdn.rsocket.RpcInstrumentation instrumentation, io.netty.buffer.ByteBufAllocator allocator, com.jauntsdn.rsocket.Rpc.Codec rpcCodec) {
    this.messageEncoder = com.jauntsdn.rsocket.generated.ProtobufCodec.encode("DinerServer", allocator, rpcCodec);
    this.service = service;
    this.rpcCodec = rpcCodec;
    if (instrumentation == null) {
      this.orderInstrumentation = null;
      this.payInstrumentation = null;
    } else {
      this.orderInstrumentation = instrumentation.instrument("service", Diner.SERVICE, Diner.METHOD_ORDER, true);
      this.payInstrumentation = instrumentation.instrument("service", Diner.SERVICE, Diner.METHOD_PAY, false);
    }
  }

  public static DinerServer.Factory create(Diner service, java.util.Optional<com.jauntsdn.rsocket.RpcInstrumentation> instrumentation) {
    return new DinerServer.Factory(service, instrumentation);
  }

  public static DinerServer.Factory create(Diner service) {
    return new DinerServer.Factory(service);
  }

  @Override
  public String service() {
    return Diner.SERVICE;
  }

  @Override
  public Class<?> serviceType() {
    return Diner.SERVICE_TYPE;
  }

  @Override
  public java.util.concurrent.CompletionStage<Void> fireAndForget(com.jauntsdn.rsocket.Message message) {
    try {
      io.netty.buffer.ByteBuf metadata = message.metadata();
      long header = com.jauntsdn.rsocket.Rpc.RpcMetadata.header(metadata);
      int flags = com.jauntsdn.rsocket.Rpc.RpcMetadata.flags(header);
      String method = rpcCodec.decodeMessageMethod(metadata, header, flags);

      switch (method) {
        case Diner.METHOD_PAY: {
          if (!Diner.METHOD_PAY_IDEMPOTENT && com.jauntsdn.rsocket.Rpc.RpcMetadata.flagIdempotentCall(flags)) {
            return com.jauntsdn.rsocket.RpcHandler.completedFuture(new com.jauntsdn.rsocket.exceptions.RpcException("DinerServer: idempotent call to non-idempotent method: " + method));
          }
          io.netty.buffer.ByteBuf messageData = message.data();
          com.google.protobuf.CodedInputStream is = com.google.protobuf.CodedInputStream.newInstance(messageData.internalNioBuffer(0, messageData.readableBytes()));
          com.jauntsdn.rsocket.RpcInstrumentation.Listener<Void> instrumentationListener = null;
          if (payInstrumentation != null) {
            instrumentationListener = payInstrumentation.create();
            instrumentationListener.onStart();
          }
          com.jauntsdn.rsocket.Headers payHeaders = com.jauntsdn.rsocket.generated.ProtobufCodec.decodeHeaders(metadata);
          java.util.concurrent.CompletionStage<Void> pay = service.pay(futures.Payment.parseFrom(is), payHeaders);
          if (instrumentationListener != null) {
            pay.whenComplete(instrumentationListener.onComplete());
          }
          return pay;
        }
        default: {
          return com.jauntsdn.rsocket.RpcHandler.completedFuture(new com.jauntsdn.rsocket.exceptions.RpcException("DinerServer: fireAndForget unknown method: " + method));
        }
      }
    } catch (Throwable t) {
      return com.jauntsdn.rsocket.RpcHandler.completedFuture(t);
    } finally {
      message.release();
    }
  }

  @Override
  public java.util.concurrent.CompletionStage<com.jauntsdn.rsocket.Message> requestResponse(com.jauntsdn.rsocket.Message message) {
    try {
      io.netty.buffer.ByteBuf metadata = message.metadata();
      long header = com.jauntsdn.rsocket.Rpc.RpcMetadata.header(metadata);
      int flags = com.jauntsdn.rsocket.Rpc.RpcMetadata.flags(header);
      String method = rpcCodec.decodeMessageMethod(metadata, header, flags);

      java.util.concurrent.CompletionStage<com.jauntsdn.rsocket.Message> handler = requestResponseHandler(flags, method, message.data(), metadata);
      if (handler != null) {
        return handler;
      }
      return com.jauntsdn.rsocket.RpcHandler.completedFuture(new com.jauntsdn.rsocket.exceptions.RpcException("DinerServer: requestResponse not implemented"));
    } catch (Throwable t) {
      return com.jauntsdn.rsocket.RpcHandler.completedFuture(t);
    } finally {
      message.release();
    }
  }

  @Override
  public void dispose() {
    onClose.complete(null);
  }

  @Override
  public boolean isDisposed() {
    return onClose.isDone();
  }

  @Override
  public java.util.concurrent.CompletionStage<Void> onClose() {
    return onClose;
  }

  private java.util.concurrent.CompletionStage<com.jauntsdn.rsocket.Message> requestResponseHandler(int flags, String method, io.netty.buffer.ByteBuf data, io.netty.buffer.ByteBuf metadata) throws java.io.IOException {
    switch (method) {
      case Diner.METHOD_ORDER: {
        if (!Diner.METHOD_ORDER_IDEMPOTENT && com.jauntsdn.rsocket.Rpc.RpcMetadata.flagIdempotentCall(flags)) {
          return com.jauntsdn.rsocket.RpcHandler.completedFuture(new com.jauntsdn.rsocket.exceptions.RpcException("DinerServer: idempotent call to non-idempotent method: " + method));
        }
        com.google.protobuf.CodedInputStream is = com.google.protobuf.CodedInputStream.newInstance(data.internalNioBuffer(0, data.readableBytes()));
        com.jauntsdn.rsocket.RpcInstrumentation.Listener<com.jauntsdn.rsocket.Message> instrumentationListener = null;
        if (orderInstrumentation != null) {
          instrumentationListener = orderInstrumentation.create();
          instrumentationListener.onStart();
        }
        com.jauntsdn.rsocket.Headers orderHeaders = com.jauntsdn.rsocket.generated.ProtobufCodec.decodeHeaders(metadata);
        java.util.concurrent.CompletionStage<futures.Meal> orderResponse = service.order(futures.Order.parseFrom(is), orderHeaders);
        java.util.concurrent.CompletionStage<com.jauntsdn.rsocket.Message> orderMessageResponse = orderResponse.thenApply(messageEncoder);
        if (instrumentationListener != null) {
          orderMessageResponse.whenComplete(com.jauntsdn.rsocket.RpcService.ResponseListener.create(orderResponse, instrumentationListener.onComplete()));
          return orderMessageResponse;
        }
        orderMessageResponse.whenComplete(com.jauntsdn.rsocket.RpcService.ResponseListener.create(orderResponse));
        return orderMessageResponse;
      }
      default: {
        return null;
      }
    }
  }

  public static final class Factory extends com.jauntsdn.rsocket.RpcService.ServerFactory<DinerServer> {

    public Factory(Diner service, java.util.Optional<com.jauntsdn.rsocket.RpcInstrumentation> instrumentation) {
      super(service, instrumentation);
    }

    public Factory(Diner service) {
      super(service);
    }

    @Override
    public DinerServer create(com.jauntsdn.rsocket.RpcInstrumentation rpcInstrumentation, io.netty.buffer.ByteBufAllocator allocator, com.jauntsdn.rsocket.Rpc.Codec rpcCodec) {
      return new DinerServer(service(), rpcInstrumentation, allocator, rpcCodec);
    }
  }
}
